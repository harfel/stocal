Developer Guide
===============

The following are guidelines for developers of stocal. If you are
interested in using stocal as a library/application, read the
`tutorial <tutorial.html>`_ instead.


Contributing
------------
Pull-requests are always welcome and will be considered as soon as
possible. Your request is more likely to be accepted if it adheres to
the guidelines detailed in this document.


Style
-----
If in doubt, `pylint <https://www.pylint.org/>`_ decides.

Documentation
-------------
Documentation is generated by `sphinx <http://www.sphinx-doc.org/>`_
using the following command line::

	$ sphinx-build doc build/html

Tests
-----
The test suite for stocal is contained in :code:`stocal.tests` and can be
run using::

	$ python -m unittest discover stocal.tests
	$ python3 -m unittest discover stocal.tests

In addition to these unit tests, validity of the documentation is
ensured via sphinx doctests::

	$ sphinx-build -b doctest doc .

Passing of all tests is an enforced requirement for all code merged
into the develop and master branches.

Coverage analysis can be performed using the third party
`coverage <https://pypi.python.org/pypi/coverage>`_  module.
The command lines are::

	$ coverage run --source=stocal --omit='stocal/tests/*' setup.py test
	$ coverage html

New functionality should be accompanied by tests. For novel
implementations of defined interfaces (abstract classes), such as
Transition or Rule, stocal.test.abstract_test offers an infrastructure
to derive implementation test cases from interface test cases. See
:code:`pydoc stocal.tests` for more information.


Validation
----------
Stocal ships with a validation suite for stochastic simulation
algorithms. The validation suite is based on the `discrete stochastic
simulation model test suite DSMTS
<https://github.com/sbmlteam/sbml-test-suite/blob/master/cases/stochastic/README.md>`_.
To run validations, call::

	$ python stocal/examples/validation.py run N

from the command line. To generate a validation report, run::

	$ python stocal/examples/validation.py report

This generates a file validation.tex that can be compiled with pdflatex.
See::

	$ python stocal/examples/validation.py -h

for more information. The DSMTS user guide recommends N=1,000 as an
absolute minimum to be run regularly in conjunction with unit test,
and n=100,000 or n=1,000,000 for a thorough statistical analysis.


Releases
--------
Stocal uses semantic versioning based on its `public API <api.html>`_.
Increases in the patch number indicate backward compatible bug fixes
without added functionality. Increases in the minor release number
indicate backward compatible feature additions. Increases in the major
release number indicate changes that break backward compatibility.

When preparing a new release, these steps should be followed

 #. git flow release start
 #. ensure an optimal code coverage of the test suite
 #. ensure that all tests pass
 #. ensure that any novel algorithm passes validation
 #. ensure that documentation (README, tutorial, etc.) is up to date
 #. update CHANGELOG.md
 #. bump the version number
 #. git flow release finish
 #. sudo setup.py sdist upload
 #. publish release on github
